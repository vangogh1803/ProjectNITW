{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport { useGoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyCustomButton = ({\n  onClick,\n  children\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: onClick,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = MyCustomButton;\nconst LoginPage = () => {\n  _s();\n  const login = useGoogleLogin({\n    onSuccess: async tokenResponse => {\n      console.log('Login Success:', tokenResponse);\n\n      // sed to backend to save data\n      try {\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: {\n            Authorization: `Bearer ${tokenResponse.access_token}`\n          }\n        });\n        const userInfo = await userInfoResponse.json();\n        await axios.post('http://localhost:5001/auth/google', {\n          googleId: userInfo.sub,\n          email: userInfo.email,\n          name: userInfo.name,\n          profilePicture: userInfo.picture,\n          accessToken: tokenResponse.access_token,\n          //for future call\n          refreshToken: tokenResponse.refresh_token\n        });\n      } catch (error) {\n        console.error('Error fetching user info or sending to backend:', error);\n      }\n    },\n    onError: () => {\n      console.log('Login Failed');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCustomButton, {\n      onClick: () => login(),\n      children: \"Sign in with Google \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"zY/v83cBMrwD3I51qGaOiRFUBvU=\", false, function () {\n  return [useGoogleLogin];\n});\n_c2 = LoginPage;\nexport default LoginPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyCustomButton\");\n$RefreshReg$(_c2, \"LoginPage\");","map":{"version":3,"names":["React","axios","useGoogleLogin","jsxDEV","_jsxDEV","MyCustomButton","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","LoginPage","_s","login","onSuccess","tokenResponse","console","log","userInfoResponse","fetch","headers","Authorization","access_token","userInfo","json","post","googleId","sub","email","name","profilePicture","picture","accessToken","refreshToken","refresh_token","error","onError","_c2","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport { useGoogleLogin } from '@react-oauth/google';\n\nconst MyCustomButton = ({ onClick, children }) => (\n  <button onClick={onClick}>{children}</button>\n);\n\nconst LoginPage = () => {\n  const login = useGoogleLogin({\n    onSuccess: async (tokenResponse) => {\n      console.log('Login Success:', tokenResponse);\n      \n      // sed to backend to save data\n      try {\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: {\n            Authorization: `Bearer ${tokenResponse.access_token}`,\n          },\n        });\n        const userInfo = await userInfoResponse.json();\n      \n        await axios.post('http://localhost:5001/auth/google', {\n          googleId: userInfo.sub, \n          email: userInfo.email, \n          name: userInfo.name, \n          profilePicture: userInfo.picture, \n          accessToken: tokenResponse.access_token, //for future call\n          refreshToken: tokenResponse.refresh_token, \n        });\n      } catch (error) {\n        console.error('Error fetching user info or sending to backend:', error);\n      }\n    },\n    onError: () => {\n      console.log('Login Failed');\n    },\n  });\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <MyCustomButton onClick={() => login()}>Sign in with Google </MyCustomButton>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,SAASC,cAAc,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,kBAC3CH,OAAA;EAAQE,OAAO,EAAEA,OAAQ;EAAAC,QAAA,EAAEA;AAAQ;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAS,CAC7C;AAACC,EAAA,GAFIP,cAAc;AAIpB,MAAMQ,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,KAAK,GAAGb,cAAc,CAAC;IAC3Bc,SAAS,EAAE,MAAOC,aAAa,IAAK;MAClCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,aAAa,CAAC;;MAE5C;MACA,IAAI;QACF,MAAMG,gBAAgB,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;UACpFC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,aAAa,CAACO,YAAY;UACrD;QACF,CAAC,CAAC;QACF,MAAMC,QAAQ,GAAG,MAAML,gBAAgB,CAACM,IAAI,CAAC,CAAC;QAE9C,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,mCAAmC,EAAE;UACpDC,QAAQ,EAAEH,QAAQ,CAACI,GAAG;UACtBC,KAAK,EAAEL,QAAQ,CAACK,KAAK;UACrBC,IAAI,EAAEN,QAAQ,CAACM,IAAI;UACnBC,cAAc,EAAEP,QAAQ,CAACQ,OAAO;UAChCC,WAAW,EAAEjB,aAAa,CAACO,YAAY;UAAE;UACzCW,YAAY,EAAElB,aAAa,CAACmB;QAC9B,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdnB,OAAO,CAACmB,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE;IACF,CAAC;IACDC,OAAO,EAAEA,CAAA,KAAM;MACbpB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B;EACF,CAAC,CAAC;EAEF,oBACEf,OAAA;IAAAG,QAAA,gBACEH,OAAA;MAAAG,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdP,OAAA,CAACC,cAAc;MAACC,OAAO,EAAEA,CAAA,KAAMS,KAAK,CAAC,CAAE;MAAAR,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEV,CAAC;AAACG,EAAA,CArCID,SAAS;EAAA,QACCX,cAAc;AAAA;AAAAqC,GAAA,GADxB1B,SAAS;AAuCf,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}