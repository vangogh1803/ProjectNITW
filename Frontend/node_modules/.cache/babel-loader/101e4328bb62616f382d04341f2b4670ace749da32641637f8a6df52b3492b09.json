{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/Events.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css'; // Import the calendar CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment); // Configure moment.js for localization\n\nconst CalendarPage = () => {\n  _s();\n  const [events, setEvents] = useState([]); // State to store events\n\n  // Fetch events from the backend\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch('/calendar'); // Backend API endpoint\n        const data = await response.json();\n\n        // Convert Google Calendar events to the format expected by React Big Calendar\n        const formattedEvents = data.map(event => ({\n          title: event.summary,\n          start: new Date(event.start.dateTime || event.start.date),\n          // Supports all-day events\n          end: new Date(event.end.dateTime || event.end.date)\n        }));\n        setEvents(formattedEvents);\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n    fetchEvents();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events // Provide fetched events to the calendar\n      ,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500,\n        margin: '50px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarPage, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = CalendarPage;\nexport default CalendarPage;\n\n// import React from 'react';\n\n// const EventsPage = () => {\n//   const calendarSrc = `https://calendar.google.com/calendar/embed?src=primary&ctz=Asia/Kolkata`; // Use appropriate timezone\n\n//   return (\n//     <div>\n//       <h1>Your Google Calendar</h1>\n//       <iframe\n//         src={calendarSrc}\n//         style={{ border: '0' }}\n//         width=\"800\"\n//         height=\"600\"\n//         frameBorder=\"0\"\n//         scrolling=\"no\"\n//         title=\"Google Calendar\"\n//       ></iframe>\n//     </div>\n//   );\n// };\n\n// export default EventsPage;\n\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n\n// // const EventsPage = () => {\n// //   const [events, setEvents] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/calendar', {\n// //           withCredentials: true,\n// //         });\n// //         setEvents(response.data);\n// //       } catch (error) {\n// //         console.error('Error fetching calendar events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       <h1>Your Upcoming Events</h1>\n// //       {events.length > 0 ? (\n// //         <ul>\n// //           {events.map((event) => (\n// //             <li key={event.id}>\n// //               <h2>{event.summary}</h2>\n// //               <p>{new Date(event.start.dateTime || event.start.date).toLocaleString()}</p>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       ) : (\n// //         <p>No events found.</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"CalendarPage\");","map":{"version":3,"names":["React","useEffect","useState","Calendar","momentLocalizer","moment","jsxDEV","_jsxDEV","localizer","CalendarPage","_s","events","setEvents","fetchEvents","response","fetch","data","json","formattedEvents","map","event","title","summary","start","Date","dateTime","date","end","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","startAccessor","endAccessor","style","height","margin","_c","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/Events.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css'; // Import the calendar CSS\n\nconst localizer = momentLocalizer(moment); // Configure moment.js for localization\n\nconst CalendarPage = () => {\n  const [events, setEvents] = useState([]); // State to store events\n\n  // Fetch events from the backend\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch('/calendar'); // Backend API endpoint\n        const data = await response.json();\n        \n        // Convert Google Calendar events to the format expected by React Big Calendar\n        const formattedEvents = data.map(event => ({\n          title: event.summary,\n          start: new Date(event.start.dateTime || event.start.date), // Supports all-day events\n          end: new Date(event.end.dateTime || event.end.date),\n        }));\n        setEvents(formattedEvents);\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n  return (\n    <div>\n      <h1>My Calendar</h1>\n      <Calendar\n        localizer={localizer}\n        events={events} // Provide fetched events to the calendar\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        style={{ height: 500, margin: '50px' }}\n      />\n    </div>\n  );\n};\n\nexport default CalendarPage;\n\n// import React from 'react';\n\n// const EventsPage = () => {\n//   const calendarSrc = `https://calendar.google.com/calendar/embed?src=primary&ctz=Asia/Kolkata`; // Use appropriate timezone\n\n//   return (\n//     <div>\n//       <h1>Your Google Calendar</h1>\n//       <iframe\n//         src={calendarSrc}\n//         style={{ border: '0' }}\n//         width=\"800\"\n//         height=\"600\"\n//         frameBorder=\"0\"\n//         scrolling=\"no\"\n//         title=\"Google Calendar\"\n//       ></iframe>\n//     </div>\n//   );\n// };\n\n// export default EventsPage;\n\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n\n// // const EventsPage = () => {\n// //   const [events, setEvents] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/calendar', {\n// //           withCredentials: true,\n// //         });\n// //         setEvents(response.data);\n// //       } catch (error) {\n// //         console.error('Error fetching calendar events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       <h1>Your Upcoming Events</h1>\n// //       {events.length > 0 ? (\n// //         <ul>\n// //           {events.map((event) => (\n// //             <li key={event.id}>\n// //               <h2>{event.summary}</h2>\n// //               <p>{new Date(event.start.dateTime || event.start.date).toLocaleString()}</p>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       ) : (\n// //         <p>No events found.</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EventsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,eAAe,QAAQ,oBAAoB;AAC9D,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,mDAAmD,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,SAAS,GAAGJ,eAAe,CAACC,MAAM,CAAC,CAAC,CAAC;;AAE3C,MAAMI,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QAC3C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,eAAe,GAAGF,IAAI,CAACG,GAAG,CAACC,KAAK,KAAK;UACzCC,KAAK,EAAED,KAAK,CAACE,OAAO;UACpBC,KAAK,EAAE,IAAIC,IAAI,CAACJ,KAAK,CAACG,KAAK,CAACE,QAAQ,IAAIL,KAAK,CAACG,KAAK,CAACG,IAAI,CAAC;UAAE;UAC3DC,GAAG,EAAE,IAAIH,IAAI,CAACJ,KAAK,CAACO,GAAG,CAACF,QAAQ,IAAIL,KAAK,CAACO,GAAG,CAACD,IAAI;QACpD,CAAC,CAAC,CAAC;QACHd,SAAS,CAACM,eAAe,CAAC;MAC5B,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDf,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB3B,OAAA,CAACJ,QAAQ;MACPK,SAAS,EAAEA,SAAU;MACrBG,MAAM,EAAEA,MAAO,CAAC;MAAA;MAChBwB,aAAa,EAAC,OAAO;MACrBC,WAAW,EAAC,KAAK;MACjBC,KAAK,EAAE;QAAEC,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACxB,EAAA,CArCID,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAuClB,eAAeA,YAAY;;AAE3B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}