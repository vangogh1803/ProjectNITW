{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/Events.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; //Import the Calendar component\nimport './css/Events.css';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Events = () => {\n  _s();\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  useEffect(() => {\n    document.body.className = 'events-page';\n    return () => {\n      document.body.className = '';\n    };\n  }, []);\n  const handleAddEvent = async () => {\n    try {\n      // Validate inputs\n      if (!start || !end) {\n        alert('Start and end times are required.');\n        return;\n      }\n\n      // Ensure start and end are valid dates\n      const startDate = new Date(start);\n      const endDate = new Date(end);\n      if (isNaN(startDate) || isNaN(endDate)) {\n        alert('Invalid date or time format.');\n        return;\n      }\n\n      // Convert to ISO strings (dateTime)\n      const startISO = startDate.toISOString();\n      const endISO = endDate.toISOString();\n\n      // Construct the event object with dateTime\n      const newEvent = {\n        summary,\n        start: {\n          dateTime: startISO,\n          timeZone: 'Asia/Kolkata'\n        },\n        end: {\n          dateTime: endISO,\n          timeZone: 'Asia/Kolkata'\n        }\n      };\n\n      // Make POST request to add the event\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n        withCredentials: true,\n        validateStatus: status => status >= 200 && status < 300 || status === 500\n      });\n\n      // Handle response\n      if (response.status === 500) {\n        console.warn('Server returned a 500 status code');\n        return;\n      }\n\n      //console.log('Backend Response:', response.data);\n\n      // Optionally fetch updated events\n      const updatedEvents = await axios.get('http://localhost:5001/', {\n        withCredentials: true\n      });\n      setEvents(updatedEvents.data);\n      console.log(updatedEvents);\n\n      // Clear form fields\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding event:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    //     <div className=\"events-page\">\n    //     {/* Sidebar */}\n    //     <div className=\"sidebar\">\n    //       <h2>Navigation</h2>\n    //       <a href=\"/user\">User Page</a>\n    //       <a href=\"/events\">Events</a>\n    //     </div>\n    //     <div className='main-content'>\n    //       <h1>Add New Event</h1>\n    //       <input\n    //         type=\"text\"\n    //         placeholder=\"Event Summary\"\n    //         value={summary}\n    //         onChange={(e) => setSummary(e.target.value)}\n    //       />\n    //       <input\n    //         type=\"datetime-local\"\n    //         value={start}\n    //         onChange={(e) => setStart(e.target.value)}\n    //       />\n    //       <input\n    //         type=\"datetime-local\"\n    //         value={end}\n    //         onChange={(e) => setEnd(e.target.value)}\n    //       />\n    //       <button type=\"button\" onClick={handleAddEvent}>Add Event</button>\n    //     <div className='calendar-container'>\n    //       <MyCalendar className='calendar-section'events={events} /> {/* Display the calendar with events */}\n    //     </div>\n    //     </div>\n    //     </div>\n    _jsxDEV(\"div\", {\n      className: \"events-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/user\",\n          children: \"User Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add New Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Event Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Start Date and Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"End Date and Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-container\",\n          id: \"calendar\",\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            src: \"https://calendar.google.com/calendar/embed?src=your_calendar_id&ctz=Asia/Kolkata\",\n            title: \"Google Calendar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 1\n    }, this)\n  );\n};\n_s(Events, \"ET3GfNF4G2YOEhjQ+kOnc2n+TYY=\");\n_c = Events;\nexport default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n\n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["React","useState","axios","MyCalendar","useEffect","jsxDEV","_jsxDEV","Events","_s","summary","setSummary","start","setStart","end","setEnd","events","setEvents","document","body","className","handleAddEvent","alert","startDate","Date","endDate","isNaN","startISO","toISOString","endISO","newEvent","dateTime","timeZone","response","post","withCredentials","validateStatus","status","console","warn","updatedEvents","get","data","log","error","_error$response","message","children","fileName","_jsxFileName","lineNumber","columnNumber","href","type","placeholder","id","src","title","_c","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/Events.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; //Import the Calendar component\nimport './css/Events.css';\nimport {useEffect} from 'react';\nconst Events = () => {\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  useEffect(() => {\n    document.body.className = 'events-page';\n    return () => {\n      document.body.className = '';\n    };\n  }, []);\n  const handleAddEvent = async () => {\n    try {\n      // Validate inputs\n      if (!start || !end) {\n        alert('Start and end times are required.');\n        return;\n      }\n  \n      // Ensure start and end are valid dates\n      const startDate = new Date(start);\n      const endDate = new Date(end);\n  \n      if (isNaN(startDate) || isNaN(endDate)) {\n        alert('Invalid date or time format.');\n        return;\n      }\n  \n      // Convert to ISO strings (dateTime)\n      const startISO = startDate.toISOString();\n      const endISO = endDate.toISOString();\n  \n      // Construct the event object with dateTime\n      const newEvent = {\n        summary,\n        start: {\n          dateTime: startISO,\n          timeZone: 'Asia/Kolkata',\n        },\n        end: {\n          dateTime: endISO,\n          timeZone: 'Asia/Kolkata',\n        },\n      };\n  \n      // Make POST request to add the event\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n        withCredentials: true,\n        validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n      });\n  \n      // Handle response\n      if (response.status === 500) {\n        console.warn('Server returned a 500 status code');\n        return;\n      }\n  \n      //console.log('Backend Response:', response.data);\n  \n      // Optionally fetch updated events\n      const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n      setEvents(updatedEvents.data);\n      console.log(updatedEvents);\n\n      // Clear form fields\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      console.error('Error adding event:', error.response?.data || error.message);\n    }\n\n  };\n\n  return (\n//     <div className=\"events-page\">\n//     {/* Sidebar */}\n//     <div className=\"sidebar\">\n//       <h2>Navigation</h2>\n//       <a href=\"/user\">User Page</a>\n//       <a href=\"/events\">Events</a>\n//     </div>\n//     <div className='main-content'>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button type=\"button\" onClick={handleAddEvent}>Add Event</button>\n//     <div className='calendar-container'>\n//       <MyCalendar className='calendar-section'events={events} /> {/* Display the calendar with events */}\n//     </div>\n//     </div>\n//     </div>\n\n<div className=\"events-page\">\n<div className=\"sidebar\">\n  <h2>Menu</h2>\n  <a href=\"/user\">User Info</a>\n</div>\n\n<div className=\"main-content\">\n  <h1>Add New Event</h1>\n\n  {/* Event Form */}\n  <form>\n    <input type=\"text\" placeholder=\"Event Title\" />\n    <input type=\"datetime-local\" placeholder=\"Start Date and Time\" />\n    <input type=\"datetime-local\" placeholder=\"End Date and Time\" />\n    <button type=\"submit\">Add Event</button>\n  </form>\n\n  {/* Calendar */}\n  <div className=\"calendar-container\" id=\"calendar\">\n    <iframe\n      src=\"https://calendar.google.com/calendar/embed?src=your_calendar_id&ctz=Asia/Kolkata\"\n      title=\"Google Calendar\"\n    ></iframe>\n  </div>\n  </div>\n  </div>\n   );\n};\n\nexport default Events;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n     \n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n      \n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}