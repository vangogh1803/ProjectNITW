{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/Calender.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { Calendar, momentLocalizer } from 'react-big-calendar';\n// import moment from 'moment';\n// import axios from 'axios';\n// import 'react-big-calendar/lib/css/react-big-calendar.css';\n\n// const localizer = momentLocalizer(moment);\n\n// const MyCalendar = () => {\n//   const [events, setEvents] = useState([]);\n\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/', { withCredentials: true });\n//         console.log('Fetched events:', response.data); // Log all events\n\n//         // Extract event names (summaries) from the fetched data\n//         const eventNames = response.data.map(event => event.summary);\n\n//         console.log('Event Names:', eventNames); // Log only the event names\n\n//         // Map the events to the format required by the Calendar\n//         const formattedEvents = response.data.map(event => ({\n//           title: event.summary,\n//           start: event.start.dateTime ? new Date(event.start.dateTime) : new Date(event.start.date),\n//           end: event.end.dateTime ? new Date(event.end.dateTime) : new Date(event.end.date),\n//         }));\n\n//         setEvents(formattedEvents);\n//       } catch (error) {\n//         console.error('Error fetching events:', error.response ? error.response.data : error.message);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Your Events</h1>\n//       <Calendar\n//         localizer={localizer}\n//         events={events}\n//         startAccessor=\"start\"\n//         endAccessor=\"end\"\n//         style={{ height: 500, margin: '50px' }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default MyCalendar;\n\nimport React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport axios from 'axios';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst MyCalendar = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null); // Track selected date\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/', {\n          withCredentials: true\n        });\n        console.log('Fetched events:', response.data); // Log all events\n\n        // Extract event names (summaries) from the fetched data\n        const eventNames = response.data.map(event => event.summary);\n        console.log('Event Names:', eventNames); // Log only the event names\n\n        // Map the events to the format required by the Calendar\n        const formattedEvents = response.data.map(event => ({\n          title: event.summary,\n          start: event.start.dateTime ? new Date(event.start.dateTime) : new Date(event.start.date),\n          end: event.end.dateTime ? new Date(event.end.dateTime) : new Date(event.end.date)\n        }));\n        setEvents(formattedEvents);\n      } catch (error) {\n        console.error('Error fetching events:', error.response ? error.response.data : error.message);\n      }\n    };\n    fetchEvents();\n  }, []);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500,\n        margin: '50px'\n      },\n      onSelectSlot: slotInfo => handleDateClick(slotInfo.start) // Update selected date on click\n      ,\n      dayPropGetter: date => {\n        // Apply custom styles for selected date\n        const isSelected = selectedDate && selectedDate.toDateString() === date.toDateString();\n        return {\n          style: isSelected ? {\n            backgroundColor: '#4285f4',\n            color: 'white',\n            borderRadius: '50%'\n          } : {}\n        };\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(MyCalendar, \"BINMJlvEj32l3yNApQQaOzjYTSI=\");\n_c = MyCalendar;\nexport default MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["React","useEffect","useState","Calendar","momentLocalizer","moment","axios","jsxDEV","_jsxDEV","localizer","MyCalendar","_s","events","setEvents","selectedDate","setSelectedDate","fetchEvents","response","get","withCredentials","console","log","data","eventNames","map","event","summary","formattedEvents","title","start","dateTime","Date","date","end","error","message","handleDateClick","children","fileName","_jsxFileName","lineNumber","columnNumber","startAccessor","endAccessor","style","height","margin","onSelectSlot","slotInfo","dayPropGetter","isSelected","toDateString","backgroundColor","color","borderRadius","_c","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/Calender.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { Calendar, momentLocalizer } from 'react-big-calendar';\n// import moment from 'moment';\n// import axios from 'axios';\n// import 'react-big-calendar/lib/css/react-big-calendar.css';\n\n// const localizer = momentLocalizer(moment);\n\n// const MyCalendar = () => {\n//   const [events, setEvents] = useState([]);\n\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5001/', { withCredentials: true });\n//         console.log('Fetched events:', response.data); // Log all events\n        \n//         // Extract event names (summaries) from the fetched data\n//         const eventNames = response.data.map(event => event.summary);\n        \n//         console.log('Event Names:', eventNames); // Log only the event names\n        \n//         // Map the events to the format required by the Calendar\n//         const formattedEvents = response.data.map(event => ({\n//           title: event.summary,\n//           start: event.start.dateTime ? new Date(event.start.dateTime) : new Date(event.start.date),\n//           end: event.end.dateTime ? new Date(event.end.dateTime) : new Date(event.end.date),\n//         }));\n\n//         setEvents(formattedEvents);\n//       } catch (error) {\n//         console.error('Error fetching events:', error.response ? error.response.data : error.message);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Your Events</h1>\n//       <Calendar\n//         localizer={localizer}\n//         events={events}\n//         startAccessor=\"start\"\n//         endAccessor=\"end\"\n//         style={{ height: 500, margin: '50px' }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default MyCalendar;\n\nimport React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport axios from 'axios';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst localizer = momentLocalizer(moment);\n\nconst MyCalendar = () => {\n  const [events, setEvents] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);  // Track selected date\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/', { withCredentials: true });\n        console.log('Fetched events:', response.data); // Log all events\n        \n        // Extract event names (summaries) from the fetched data\n        const eventNames = response.data.map(event => event.summary);\n        \n        console.log('Event Names:', eventNames); // Log only the event names\n        \n        // Map the events to the format required by the Calendar\n        const formattedEvents = response.data.map(event => ({\n          title: event.summary,\n          start: event.start.dateTime ? new Date(event.start.dateTime) : new Date(event.start.date),\n          end: event.end.dateTime ? new Date(event.end.dateTime) : new Date(event.end.date),\n        }));\n\n        setEvents(formattedEvents);\n      } catch (error) {\n        console.error('Error fetching events:', error.response ? error.response.data : error.message);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <div>\n      <h1>Your Events</h1>\n      <Calendar\n        localizer={localizer}\n        events={events}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        style={{ height: 500, margin: '50px' }}\n        onSelectSlot={(slotInfo) => handleDateClick(slotInfo.start)}  // Update selected date on click\n        dayPropGetter={(date) => {\n          // Apply custom styles for selected date\n          const isSelected = selectedDate && selectedDate.toDateString() === date.toDateString();\n          return {\n            style: isSelected ? { backgroundColor: '#4285f4', color: 'white', borderRadius: '50%' } : {}\n          };\n        }}\n      />\n    </div>\n  );\n};\n\nexport default MyCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}