{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/Events.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Calender.css'; // Adjust the path accordingly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyCalendar = ({\n  events\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const today = new Date();\n  const handleDateClick = date => {\n    setSelectedDate(date);\n  };\n  const generateCalendar = () => {\n    const daysOfWeek = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n    const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1).getDay();\n    let calendarDays = [];\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      calendarDays.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 25\n      }, this)); // Empty cells before the first day\n    }\n    for (let day = 1; day <= daysInMonth; day++) {\n      const isSelected = selectedDate === day;\n      calendarDays.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `day ${isSelected ? 'selected' : ''}`,\n        onClick: () => handleDateClick(day),\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this));\n    }\n    return calendarDays;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: '<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [today.toLocaleString('default', {\n          month: 'long'\n        }), \" \", today.getFullYear()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: '>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: [['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: day\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)), generateCalendar()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(MyCalendar, \"rhrbPH1/NtfhiyDl62tZ0yGffOM=\");\n_c = MyCalendar;\nexport default MyCalendar;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; //Import the Calendar component\n// import './css/Events.css';\n// import {useEffect} from 'react';\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n//   const handleAddEvent = async () => {\n//     try {\n//       // Validate inputs\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n\n//       // Ensure start and end are valid dates\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n\n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n\n//       // Convert to ISO strings (dateTime)\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n\n//       // Construct the event object with dateTime\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n\n//       // Make POST request to add the event\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n\n//       // Handle response\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n\n//       //console.log('Backend Response:', response.data);\n\n//       // Optionally fetch updated events\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n//       console.log(updatedEvents);\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//     {/* Sidebar */}\n//     <div className=\"sidebar\">\n//       <h2>Navigation</h2>\n//       <a href=\"/UserPage\">User Page</a>\n//       <a href=\"/events\">Events</a>\n//     </div>\n//     <div className='main-content'>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button type=\"button\" onClick={handleAddEvent}>Add Event</button>\n//     <div className='calendar-container'>\n//       <MyCalendar className='calendar-section'events={events} /> {/* Display the calendar with events */}\n//     </div>\n//     </div>\n//     </div>\n//    );\n// };\n\n// export default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n\n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MyCalendar","events","_s","selectedDate","setSelectedDate","today","Date","handleDateClick","date","generateCalendar","daysOfWeek","daysInMonth","getFullYear","getMonth","getDate","firstDayOfMonth","getDay","calendarDays","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","day","isSelected","onClick","children","toLocaleString","month","map","index","_c","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/Events.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Calender.css'; // Adjust the path accordingly\n\nconst MyCalendar = ({ events }) => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const today = new Date();\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n  };\n\n  const generateCalendar = () => {\n    const daysOfWeek = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n    const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1).getDay();\n\n    let calendarDays = [];\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      calendarDays.push(<div key={`empty-${i}`} className=\"empty\"></div>); // Empty cells before the first day\n    }\n\n    for (let day = 1; day <= daysInMonth; day++) {\n      const isSelected = selectedDate === day;\n      calendarDays.push(\n        <div\n          key={day}\n          className={`day ${isSelected ? 'selected' : ''}`}\n          onClick={() => handleDateClick(day)}\n        >\n          {day}\n        </div>\n      );\n    }\n\n    return calendarDays;\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <div className=\"calendar-header\">\n        <button>{'<'}</button> {/* Add functionality to change month */}\n        <span>{today.toLocaleString('default', { month: 'long' })} {today.getFullYear()}</span>\n        <button>{'>'}</button> {/* Add functionality to change month */}\n      </div>\n      <div className=\"calendar-grid\">\n        {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, index) => (\n          <div key={index}>{day}</div>\n        ))}\n        {generateCalendar()}\n      </div>\n    </div>\n  );\n};\n\nexport default MyCalendar;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; //Import the Calendar component\n// import './css/Events.css';\n// import {useEffect} from 'react';\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n//   const handleAddEvent = async () => {\n//     try {\n//       // Validate inputs\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n  \n//       // Ensure start and end are valid dates\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n  \n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n  \n//       // Convert to ISO strings (dateTime)\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n  \n//       // Construct the event object with dateTime\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n  \n//       // Make POST request to add the event\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n  \n//       // Handle response\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n  \n//       //console.log('Backend Response:', response.data);\n  \n//       // Optionally fetch updated events\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n//       console.log(updatedEvents);\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//     {/* Sidebar */}\n//     <div className=\"sidebar\">\n//       <h2>Navigation</h2>\n//       <a href=\"/UserPage\">User Page</a>\n//       <a href=\"/events\">Events</a>\n//     </div>\n//     <div className='main-content'>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button type=\"button\" onClick={handleAddEvent}>Add Event</button>\n//     <div className='calendar-container'>\n//       <MyCalendar className='calendar-section'events={events} /> {/* Display the calendar with events */}\n//     </div>\n//     </div>\n//     </div>\n//    );\n// };\n\n// export default Events;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n     \n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n      \n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}