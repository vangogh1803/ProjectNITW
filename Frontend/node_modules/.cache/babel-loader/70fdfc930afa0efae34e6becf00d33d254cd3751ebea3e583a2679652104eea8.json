{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devik\\\\OneDrive\\\\Desktop\\\\PR-Project\\\\ProjectNITW\\\\Frontend\\\\src\\\\Events.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; // Import the Calendar component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Events = () => {\n  _s();\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  const handleAddEvent = async () => {\n    try {\n      // Validate inputs\n      if (!start || !end) {\n        alert('Start and end times are required.');\n        return;\n      }\n\n      // Ensure start and end are valid dates\n      const startDate = new Date(start);\n      const endDate = new Date(end);\n      if (isNaN(startDate) || isNaN(endDate)) {\n        alert('Invalid date or time format.');\n        return;\n      }\n\n      // Convert to ISO strings (dateTime)\n      const startISO = startDate.toISOString();\n      const endISO = endDate.toISOString();\n\n      // Construct the event object with dateTime\n      const newEvent = {\n        summary,\n        start: {\n          dateTime: startISO,\n          timeZone: 'Asia/Kolkata'\n        },\n        end: {\n          dateTime: endISO,\n          timeZone: 'Asia/Kolkata'\n        }\n      };\n\n      // Make POST request to add the event\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n        withCredentials: true,\n        validateStatus: status => status >= 200 && status < 300 || status === 500\n      });\n\n      // Handle response\n      if (response.status === 500) {\n        console.warn('Server returned a 500 status code');\n        return;\n      }\n\n      //console.log('Backend Response:', response.data);\n\n      // Optionally fetch updated events\n      const updatedEvents = await axios.get('http://localhost:5001/', {\n        withCredentials: true\n      });\n      setEvents(updatedEvents.data);\n      console.log(updatedEvents);\n\n      // Clear form fields\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding event:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add New Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Event Summary\",\n      value: summary,\n      onChange: e => setSummary(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: start,\n      onChange: e => setStart(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: end,\n      onChange: e => setEnd(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddEvent,\n      children: \"Add Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCalendar, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Events, \"KFJsRte9VBCf3dvhHhMUXEVEYY8=\");\n_c = Events;\nexport default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n\n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["React","useState","axios","MyCalendar","jsxDEV","_jsxDEV","Events","_s","summary","setSummary","start","setStart","end","setEnd","events","setEvents","handleAddEvent","alert","startDate","Date","endDate","isNaN","startISO","toISOString","endISO","newEvent","dateTime","timeZone","response","post","withCredentials","validateStatus","status","console","warn","updatedEvents","get","data","log","error","_error$response","message","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/devik/OneDrive/Desktop/PR-Project/ProjectNITW/Frontend/src/Events.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport MyCalendar from './Calender.js'; // Import the Calendar component\r\n\r\nconst Events = () => {\r\n  const [summary, setSummary] = useState('');\r\n  const [start, setStart] = useState('');\r\n  const [end, setEnd] = useState('');\r\n  const [events, setEvents] = useState([]); // To store fetched events\r\n\r\n  const handleAddEvent = async () => {\r\n    try {\r\n      // Validate inputs\r\n      if (!start || !end) {\r\n        alert('Start and end times are required.');\r\n        return;\r\n      }\r\n  \r\n      // Ensure start and end are valid dates\r\n      const startDate = new Date(start);\r\n      const endDate = new Date(end);\r\n  \r\n      if (isNaN(startDate) || isNaN(endDate)) {\r\n        alert('Invalid date or time format.');\r\n        return;\r\n      }\r\n  \r\n      // Convert to ISO strings (dateTime)\r\n      const startISO = startDate.toISOString();\r\n      const endISO = endDate.toISOString();\r\n  \r\n      // Construct the event object with dateTime\r\n      const newEvent = {\r\n        summary,\r\n        start: {\r\n          dateTime: startISO,\r\n          timeZone: 'Asia/Kolkata',\r\n        },\r\n        end: {\r\n          dateTime: endISO,\r\n          timeZone: 'Asia/Kolkata',\r\n        },\r\n      };\r\n  \r\n      // Make POST request to add the event\r\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\r\n        withCredentials: true,\r\n        validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\r\n      });\r\n  \r\n      // Handle response\r\n      if (response.status === 500) {\r\n        console.warn('Server returned a 500 status code');\r\n        return;\r\n      }\r\n  \r\n      //console.log('Backend Response:', response.data);\r\n  \r\n      // Optionally fetch updated events\r\n      const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\r\n      setEvents(updatedEvents.data);\r\n      console.log(updatedEvents);\r\n\r\n      // Clear form fields\r\n      setSummary('');\r\n      setStart('');\r\n      setEnd('');\r\n    } catch (error) {\r\n      console.error('Error adding event:', error.response?.data || error.message);\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Add New Event</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Event Summary\"\r\n        value={summary}\r\n        onChange={(e) => setSummary(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"datetime-local\"\r\n        value={start}\r\n        onChange={(e) => setStart(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"datetime-local\"\r\n        value={end}\r\n        onChange={(e) => setEnd(e.target.value)}\r\n      />\r\n      <button onClick={handleAddEvent}>Add Event</button>\r\n\r\n      <MyCalendar events={events} /> {/* Display the calendar with events */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Events;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import MyCalendar from './Calender.js'; // Import the Calendar component\r\n\r\n\r\n// const Events = () => {\r\n//   const [summary, setSummary] = useState('');\r\n//   const [start, setStart] = useState('');\r\n//   const [end, setEnd] = useState('');\r\n//   const [events, setEvents] = useState([]); // To store fetched events\r\n\r\n//   const handleAddEvent = async () => {\r\n//     try {\r\n     \r\n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\r\n// const endDate = new Date(end).toISOString();\r\n\r\n// const newEvent = {\r\n//   summary,\r\n//   start: {\r\n//     dateTime: startDate, // Use ISO string for start date\r\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\r\n//   },\r\n//   end: {\r\n//     dateTime: endDate, // Use ISO string for end date\r\n//     timeZone: 'Asia/Kolkata',\r\n//   },\r\n// };\r\n// try {\r\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\r\n//     withCredentials: true,\r\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\r\n//   });\r\n\r\n//   console.log('Backend Response:', response.data);\r\n\r\n//   if (response.status === 500) {\r\n//     console.warn('Server returned a 500 status code');\r\n//     return;\r\n//   }\r\n// } catch (error) {\r\n//   console.error('Error adding event:', error.response?.data || error.message);\r\n// }\r\n      \r\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\r\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\r\n//     });\r\n//     console.log(response);\r\n//     if (response.status === 500) {\r\n//       console.warn('Server returned a 500 status code');\r\n//       return; // Exit if there's a server error\r\n//     }\r\n\r\n//     console.log('Backend Response:', response.data);\r\n//       //////changed here////\r\n//       // // Optionally, fetch the updated list of events after adding the new one\r\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\r\n//       // setEvents(response.data); // Update state with new event list\r\n\r\n//       // Clear form fields\r\n//       setSummary('');\r\n//       setStart('');\r\n//       setEnd('');\r\n//     } catch (error) {\r\n//       console.error('Error adding event:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Add New Event</h1>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Event Summary\"\r\n//         value={summary}\r\n//         onChange={(e) => setSummary(e.target.value)}\r\n//       />\r\n//       <input\r\n//         type=\"datetime-local\"\r\n//         value={start}\r\n//         onChange={(e) => setStart(e.target.value)}\r\n//       />\r\n//       <input\r\n//         type=\"datetime-local\"\r\n//         value={end}\r\n//         onChange={(e) => setEnd(e.target.value)}\r\n//       />\r\n//       <button onClick={handleAddEvent}>Add Event</button>\r\n\r\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Events;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}