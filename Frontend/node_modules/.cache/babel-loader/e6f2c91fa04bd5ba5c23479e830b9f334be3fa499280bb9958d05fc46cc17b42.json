{"ast":null,"code":"import express from 'express';\nimport passport from 'passport';\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.js'; // Import your User model\n\nconst router = express.Router();\n\n/**\n * Route: Redirect to Google for authentication\n */\nrouter.get('/google', passport.authenticate('google', {\n  scope: ['email', 'profile'] // Request email and profile scopes\n}));\n\n/**\n * Route: Google OAuth callback\n * After Google redirects back, this handles user creation/updating\n */\nrouter.get('/google/callback', passport.authenticate('google', {\n  failureRedirect: '/login'\n}),\n// Redirect to login page on failure\nasync (req, res) => {\n  console.log('Google login successful:', req.user);\n  try {\n    const {\n      id,\n      displayName,\n      emails,\n      photos\n    } = req.user;\n\n    // Check if the user exists in the database\n    let user = await User.findOne({\n      googleId: id\n    });\n    if (!user) {\n      var _emails$, _photos$;\n      // If the user doesn't exist, create a new user\n      user = new User({\n        googleId: id,\n        name: displayName,\n        email: (_emails$ = emails[0]) === null || _emails$ === void 0 ? void 0 : _emails$.value,\n        // Ensure email exists\n        profilePicture: (_photos$ = photos[0]) === null || _photos$ === void 0 ? void 0 : _photos$.value // Ensure photo exists\n      });\n      await user.save();\n      console.log('New user created:', user);\n    } else {\n      console.log('User already exists:', user);\n    }\n\n    // Generate JWT token after successful login\n    const token = jwt.sign({\n      userId: user._id,\n      email: user.email\n    }, process.env.JWT_SECRET,\n    // Secret key for signing\n    {\n      expiresIn: '1h'\n    } // Token expiration time\n    );\n\n    // Redirect to frontend with the token\n    res.redirect(`http://localhost:3001/events?token=${token}`);\n  } catch (error) {\n    console.error('Error processing user data:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n/**\n * Route: Login using Google ID (for token-based frontend authentication)\n */\nrouter.post('/google', async (req, res) => {\n  const {\n    googleId,\n    email,\n    name,\n    profilePicture\n  } = req.body;\n  try {\n    // Check if the user exists in the database\n    let user = await User.findOne({\n      googleId\n    });\n    if (!user) {\n      // If the user doesn't exist, create a new user\n      user = new User({\n        googleId,\n        email,\n        name,\n        profilePicture\n      });\n      await user.save();\n    }\n    console.log('User authenticated:', user);\n\n    // Generate JWT token\n    const token = jwt.sign({\n      userId: user._id,\n      email: user.email\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n\n    // Respond with the token\n    res.status(200).json({\n      message: 'User authenticated successfully',\n      user,\n      token\n    });\n  } catch (error) {\n    console.error('Error during user authentication:', error);\n    res.status(500).json({\n      message: 'Internal Server Error'\n    });\n  }\n});\nexport default router;\n\n// import React from 'react';\n// import axios from 'axios';\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({ \n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       try { \n//         // Fetch user info from Google API using the provided token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         // Prepare the payload to send to the backend\n//         const payload = {\n//           googleId: userInfo.sub,\n//           email: userInfo.email,\n//           name: userInfo.name,\n//           profilePicture: userInfo.picture,\n//           accessToken: tokenResponse.access_token,\n//         };\n\n//         // Optionally include refresh token if available\n//         if (tokenResponse.refresh_token) {\n//           payload.refreshToken = tokenResponse.refresh_token;\n//         }\n\n//         // Send user data to backend for authentication/registration\n//         const response = await axios.post('http://localhost:5001/auth/google', payload, {\n//           withCredentials: true,\n//           validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//         });\n\n//         if (response.status === 500) {\n//           console.warn('Server returned a 500 status code');\n//         }\n\n//         console.log('Backend Response:', response.data);\n//         // Optional: Get authenticated user data from the backend\n//         const userResponse = await axios.get('http://localhost:5001/auth/user', {\n//           withCredentials: true,\n//         });\n//         console.log('Authenticated User:', userResponse.data);\n\n//         window.location.href = '/events';\n\n//         // Redirect to the events page after successful login\n//          // Adjust as necessary for your frontend\n//       } catch (error) {\n//         console.error('Error during login:', error);\n\n//         if (error.response) {\n//           console.error('Backend Error:', error.response.data);\n//         } else if (error.request) {\n//           console.error('No Response from Backend:', error.request);\n//         } else {\n//           console.error('Setup Error:', error.message);\n//         }\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n// import React from 'react';\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       // Send data to the backend\n//       try {\n//         // Fetch user info from Google using the access token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: {\n//             Authorization: `Bearer ${tokenResponse.access_token}`, // Corrected syntax for template literals\n//           },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           // If fetching user info fails, log it but don't throw an error\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return; // Exit early but don't stop execution\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n\n//         // Send the user info to the backend\n//         const response = await axios.post(\n//           'http://localhost:5001/auth/google',\n//           {\n//             googleId: userInfo.sub,\n//             email: userInfo.email,\n//             name: userInfo.name,\n//             profilePicture: userInfo.picture,\n//             accessToken: tokenResponse.access_token, // For future calls\n//             refreshToken: tokenResponse.refresh_token,\n//           },\n//           {\n//             // Custom validateStatus to treat status codes >= 200 and 500 as valid\n//             validateStatus: (status) => {\n//               return (status >= 200 && status < 300) || status === 500; // Accept 500 as valid\n//             },\n//           }\n//         );\n//         //this\n//         axios.get('http://localhost:5001/auth/user', { withCredentials: true });\n//         axios.interceptors.request.use(request => {\n//           console.log('Starting Request', request);\n//           return request;\n//         });\n\n//         axios.interceptors.response.use(response => {\n//           console.log('Response:', response);\n//           return response;\n//         });\n\n//         // Check if the response status is 500 and log a warning\n//         if (response.status === 500) {\n//           console.warn('Received status code 500 from the server');\n//         }\n\n//         // Continue execution even after receiving a 500 or successful response\n//         console.log('Backend response:', response.data);\n//       } catch (error) {\n//         // Log any other errors (network issues, etc.), but don't stop execution\n//         console.error('Error fetching user info or sending to backend:', error);\n//       }\n//     },\n//     onError: () => {\n//       console.log('Login Failed');\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n// import React from 'react';\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       try {\n//         // Fetch user info from Google using the access token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: {\n//             Authorization: `Bearer ${tokenResponse.access_token}`,\n//           },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         // Send the user info to the backend\n//         const response = await axios.post(\n//           'http://localhost:5001/auth/google', // Backend endpoint for Google login\n//           {\n//             googleId: userInfo.sub, // Unique Google user ID\n//             email: userInfo.email, // User's email\n//             name: userInfo.name, // User's name\n//             profilePicture: userInfo.picture, // User's profile picture URL\n//             accessToken: tokenResponse.access_token, // Google access token\n//           },\n//           {\n//             withCredentials: true, // Send cookies for authentication\n//           }\n//         );\n\n//         console.log('Backend Response:', response.data);\n\n//         // Redirect to the events page after successful login\n//         window.location.href = '/events';\n//       } catch (error) {\n//         console.error('Error during login or backend communication:', error);\n\n//         // Handle common Axios or network issues\n//         if (error.response) {\n//           console.error('Backend returned an error:', error.response.data);\n//         } else if (error.request) {\n//           console.error('No response received from backend:', error.request);\n//         } else {\n//           console.error('Error setting up request:', error.message);\n//         }\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n// import React from 'react';\n// import axios from 'axios';\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({ \n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       try { \n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         const payload = {\n//           googleId: userInfo.sub,\n//           email: userInfo.email,\n//           name: userInfo.name,\n//           profilePicture: userInfo.picture,\n//           accessToken: tokenResponse.access_token,\n//         };\n\n//         if (tokenResponse.refresh_token) {\n//           payload.refreshToken = tokenResponse.refresh_token;\n//         }\n\n//         const response = await axios.post('http://localhost:5001/auth/google', payload, {\n//           withCredentials: true,\n//           validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//         });\n\n//         if (response.status === 500) {\n//           console.warn('Server returned a 500 status code');\n//         }\n\n//         console.log('Backend Response:', response.data);\n\n//         // Optional: Get authenticated user data\n//         const userResponse = await axios.get('http://localhost:5001/auth/user', {\n//           withCredentials: true,\n//         });\n//         console.log('Authenticated User:', userResponse.data);\n\n//         // Redirect on success\n//         window.location.href = '/events';\n//       } catch (error) {\n//         console.error('Error during login:', error);\n\n//         if (error.response) {\n//           console.error('Backend Error:', error.response.data);\n//         } else if (error.request) {\n//           console.error('No Response from Backend:', error.request);\n//         } else {\n//           console.error('Setup Error:', error.message);\n//         }\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const LoginPage = () => {\n//   const [loading, setLoading] = useState(false);\n\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       setLoading(true);\n//       console.log('Login Success:', tokenResponse);\n\n//       try {\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           alert('Failed to fetch user info.');\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         const payload = {\n//           googleId: userInfo.sub,\n//           email: userInfo.email,\n//           name: userInfo.name,\n//           profilePicture: userInfo.picture,\n//           accessToken: tokenResponse.access_token,\n//         };\n\n//         const response = await axios.post('http://localhost:5001/auth/google', payload, {\n//           withCredentials: true,\n//           validateStatus: (status) => status >= 200 && status < 300,\n//         });\n\n//         console.log('Backend Response:', response.data);\n\n//         // Redirect on success\n//         window.location.href = '/events';\n//       } catch (error) {\n//         console.error('Error during login:', error);\n//         alert('Error occurred. Please try again later.');\n//       } finally {\n//         setLoading(false);\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//       setLoading(false);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <button onClick={() => !loading && login()}>\n//         {loading ? 'Signing in...' : 'Sign in with Google'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;","map":{"version":3,"names":["express","passport","jwt","User","router","Router","get","authenticate","scope","failureRedirect","req","res","console","log","user","id","displayName","emails","photos","findOne","googleId","_emails$","_photos$","name","email","value","profilePicture","save","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","redirect","error","status","send","post","body","json","message"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js"],"sourcesContent":["import express from 'express';\nimport passport from 'passport';\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.js'; // Import your User model\n\nconst router = express.Router();\n\n/**\n * Route: Redirect to Google for authentication\n */\nrouter.get(\n  '/google',\n  passport.authenticate('google', {\n    scope: ['email', 'profile'], // Request email and profile scopes\n  })\n);\n\n/**\n * Route: Google OAuth callback\n * After Google redirects back, this handles user creation/updating\n */\nrouter.get(\n  '/google/callback',\n  passport.authenticate('google', { failureRedirect: '/login' }), // Redirect to login page on failure\n  async (req, res) => {\n    console.log('Google login successful:', req.user);\n\n    try {\n      const { id, displayName, emails, photos } = req.user;\n\n      // Check if the user exists in the database\n      let user = await User.findOne({ googleId: id });\n      if (!user) {\n        // If the user doesn't exist, create a new user\n        user = new User({\n          googleId: id,\n          name: displayName,\n          email: emails[0]?.value, // Ensure email exists\n          profilePicture: photos[0]?.value, // Ensure photo exists\n        });\n\n        await user.save();\n        console.log('New user created:', user);\n      } else {\n        console.log('User already exists:', user);\n      }\n\n      // Generate JWT token after successful login\n      const token = jwt.sign(\n        { userId: user._id, email: user.email },\n        process.env.JWT_SECRET, // Secret key for signing\n        { expiresIn: '1h' } // Token expiration time\n      );\n\n      // Redirect to frontend with the token\n      res.redirect(`http://localhost:3001/events?token=${token}`);\n    } catch (error) {\n      console.error('Error processing user data:', error);\n      res.status(500).send('Internal Server Error');\n    }\n  }\n);\n\n/**\n * Route: Login using Google ID (for token-based frontend authentication)\n */\nrouter.post('/google', async (req, res) => {\n  const { googleId, email, name, profilePicture } = req.body;\n\n  try {\n    // Check if the user exists in the database\n    let user = await User.findOne({ googleId });\n    if (!user) {\n      // If the user doesn't exist, create a new user\n      user = new User({\n        googleId,\n        email,\n        name,\n        profilePicture,\n      });\n\n      await user.save();\n    }\n\n    console.log('User authenticated:', user);\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: user._id, email: user.email },\n      process.env.JWT_SECRET,\n      { expiresIn: '1h' }\n    );\n\n    // Respond with the token\n    res.status(200).json({ message: 'User authenticated successfully', user, token });\n  } catch (error) {\n    console.error('Error during user authentication:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n});\n\nexport default router;\n\n// import React from 'react';\n// import axios from 'axios';\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({ \n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       try { \n//         // Fetch user info from Google API using the provided token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         // Prepare the payload to send to the backend\n//         const payload = {\n//           googleId: userInfo.sub,\n//           email: userInfo.email,\n//           name: userInfo.name,\n//           profilePicture: userInfo.picture,\n//           accessToken: tokenResponse.access_token,\n//         };\n\n//         // Optionally include refresh token if available\n//         if (tokenResponse.refresh_token) {\n//           payload.refreshToken = tokenResponse.refresh_token;\n//         }\n\n//         // Send user data to backend for authentication/registration\n//         const response = await axios.post('http://localhost:5001/auth/google', payload, {\n//           withCredentials: true,\n//           validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//         });\n\n//         if (response.status === 500) {\n//           console.warn('Server returned a 500 status code');\n//         }\n\n//         console.log('Backend Response:', response.data);\n//         // Optional: Get authenticated user data from the backend\n//         const userResponse = await axios.get('http://localhost:5001/auth/user', {\n//           withCredentials: true,\n//         });\n//         console.log('Authenticated User:', userResponse.data);\n        \n//         window.location.href = '/events';\n\n//         // Redirect to the events page after successful login\n//          // Adjust as necessary for your frontend\n//       } catch (error) {\n//         console.error('Error during login:', error);\n\n//         if (error.response) {\n//           console.error('Backend Error:', error.response.data);\n//         } else if (error.request) {\n//           console.error('No Response from Backend:', error.request);\n//         } else {\n//           console.error('Setup Error:', error.message);\n//         }\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n\n// import React from 'react';\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       // Send data to the backend\n//       try {\n//         // Fetch user info from Google using the access token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: {\n//             Authorization: `Bearer ${tokenResponse.access_token}`, // Corrected syntax for template literals\n//           },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           // If fetching user info fails, log it but don't throw an error\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return; // Exit early but don't stop execution\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n\n//         // Send the user info to the backend\n//         const response = await axios.post(\n//           'http://localhost:5001/auth/google',\n//           {\n//             googleId: userInfo.sub,\n//             email: userInfo.email,\n//             name: userInfo.name,\n//             profilePicture: userInfo.picture,\n//             accessToken: tokenResponse.access_token, // For future calls\n//             refreshToken: tokenResponse.refresh_token,\n//           },\n//           {\n//             // Custom validateStatus to treat status codes >= 200 and 500 as valid\n//             validateStatus: (status) => {\n//               return (status >= 200 && status < 300) || status === 500; // Accept 500 as valid\n//             },\n//           }\n//         );\n//         //this\n//         axios.get('http://localhost:5001/auth/user', { withCredentials: true });\n//         axios.interceptors.request.use(request => {\n//           console.log('Starting Request', request);\n//           return request;\n//         });\n        \n//         axios.interceptors.response.use(response => {\n//           console.log('Response:', response);\n//           return response;\n//         });\n\n\n//         // Check if the response status is 500 and log a warning\n//         if (response.status === 500) {\n//           console.warn('Received status code 500 from the server');\n//         }\n\n//         // Continue execution even after receiving a 500 or successful response\n//         console.log('Backend response:', response.data);\n//       } catch (error) {\n//         // Log any other errors (network issues, etc.), but don't stop execution\n//         console.error('Error fetching user info or sending to backend:', error);\n//       }\n//     },\n//     onError: () => {\n//       console.log('Login Failed');\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n// import React from 'react';\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       try {\n//         // Fetch user info from Google using the access token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: {\n//             Authorization: `Bearer ${tokenResponse.access_token}`,\n//           },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         // Send the user info to the backend\n//         const response = await axios.post(\n//           'http://localhost:5001/auth/google', // Backend endpoint for Google login\n//           {\n//             googleId: userInfo.sub, // Unique Google user ID\n//             email: userInfo.email, // User's email\n//             name: userInfo.name, // User's name\n//             profilePicture: userInfo.picture, // User's profile picture URL\n//             accessToken: tokenResponse.access_token, // Google access token\n//           },\n//           {\n//             withCredentials: true, // Send cookies for authentication\n//           }\n//         );\n\n//         console.log('Backend Response:', response.data);\n\n//         // Redirect to the events page after successful login\n//         window.location.href = '/events';\n//       } catch (error) {\n//         console.error('Error during login or backend communication:', error);\n\n//         // Handle common Axios or network issues\n//         if (error.response) {\n//           console.error('Backend returned an error:', error.response.data);\n//         } else if (error.request) {\n//           console.error('No response received from backend:', error.request);\n//         } else {\n//           console.error('Error setting up request:', error.message);\n//         }\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n\n// import React from 'react';\n// import axios from 'axios';\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({ \n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       try { \n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         const payload = {\n//           googleId: userInfo.sub,\n//           email: userInfo.email,\n//           name: userInfo.name,\n//           profilePicture: userInfo.picture,\n//           accessToken: tokenResponse.access_token,\n//         };\n\n//         if (tokenResponse.refresh_token) {\n//           payload.refreshToken = tokenResponse.refresh_token;\n//         }\n\n//         const response = await axios.post('http://localhost:5001/auth/google', payload, {\n//           withCredentials: true,\n//           validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//         });\n\n//         if (response.status === 500) {\n//           console.warn('Server returned a 500 status code');\n//         }\n\n//         console.log('Backend Response:', response.data);\n\n//         // Optional: Get authenticated user data\n//         const userResponse = await axios.get('http://localhost:5001/auth/user', {\n//           withCredentials: true,\n//         });\n//         console.log('Authenticated User:', userResponse.data);\n\n//         // Redirect on success\n//         window.location.href = '/events';\n//       } catch (error) {\n//         console.error('Error during login:', error);\n\n//         if (error.response) {\n//           console.error('Backend Error:', error.response.data);\n//         } else if (error.request) {\n//           console.error('No Response from Backend:', error.request);\n//         } else {\n//           console.error('Setup Error:', error.message);\n//         }\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const LoginPage = () => {\n//   const [loading, setLoading] = useState(false);\n\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       setLoading(true);\n//       console.log('Login Success:', tokenResponse);\n\n//       try {\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           alert('Failed to fetch user info.');\n//           return;\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n//         console.log('Fetched User Info:', userInfo);\n\n//         const payload = {\n//           googleId: userInfo.sub,\n//           email: userInfo.email,\n//           name: userInfo.name,\n//           profilePicture: userInfo.picture,\n//           accessToken: tokenResponse.access_token,\n//         };\n\n//         const response = await axios.post('http://localhost:5001/auth/google', payload, {\n//           withCredentials: true,\n//           validateStatus: (status) => status >= 200 && status < 300,\n//         });\n\n//         console.log('Backend Response:', response.data);\n\n//         // Redirect on success\n//         window.location.href = '/events';\n//       } catch (error) {\n//         console.error('Error during login:', error);\n//         alert('Error occurred. Please try again later.');\n//       } finally {\n//         setLoading(false);\n//       }\n//     },\n//     onError: (error) => {\n//       console.error('Login Failed:', error);\n//       setLoading(false);\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <button onClick={() => !loading && login()}>\n//         {loading ? 'Signing in...' : 'Sign in with Google'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n"],"mappings":"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CAAiC;MAAE7B,IAAI;MAAEc;IAAM,CAAC,CAAC;EACnF,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdzB,OAAO,CAACyB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD1B,GAAG,CAAC2B,MAAM,CAAC,GAAG,CAAC,CAACI,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;AAEF,eAAevC,MAAM;;AAErB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}