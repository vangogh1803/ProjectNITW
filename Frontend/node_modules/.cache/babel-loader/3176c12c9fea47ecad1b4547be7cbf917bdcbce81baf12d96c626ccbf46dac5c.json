{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport axios from 'axios';\nimport { useGoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyCustomButton = ({\n  onClick,\n  children\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: onClick,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n_c = MyCustomButton;\nconst LoginPage = () => {\n  _s();\n  const login = useGoogleLogin({\n    onSuccess: async tokenResponse => {\n      console.log('Login Success:', tokenResponse);\n      try {\n        // Fetch user info from Google API using the provided token\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: {\n            Authorization: `Bearer ${tokenResponse.access_token}`\n          }\n        });\n        if (!userInfoResponse.ok) {\n          console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n          return;\n        }\n        const userInfo = await userInfoResponse.json();\n        console.log('Fetched User Info:', userInfo);\n\n        // Prepare the payload to send to the backend\n        const payload = {\n          googleId: userInfo.sub,\n          email: userInfo.email,\n          name: userInfo.name,\n          profilePicture: userInfo.picture,\n          accessToken: tokenResponse.access_token\n        };\n\n        // Optionally include refresh token if available\n        if (tokenResponse.refresh_token) {\n          payload.refreshToken = tokenResponse.refresh_token;\n        }\n\n        // Send user data to backend for authentication/registration\n        const response = await axios.post('http://localhost:5001/auth/google', payload, {\n          withCredentials: true,\n          validateStatus: status => status >= 200 && status < 300 || status === 500\n        });\n        if (response.status === 500) {\n          console.warn('Server returned a 500 status code');\n          return; // Exit if there's a server error\n        }\n        console.log('Backend Response:', response.data);\n\n        // // Optional: Get authenticated user data from the backend\n        // const userResponse = await axios.get('http://localhost:5001/auth/user', {\n        //   withCredentials: true,\n        // });\n\n        // console.log('Authenticated User:', userResponse.data);\n\n        // Redirect to events page only after successful authentication\n        window.location.href = '/events';\n      } catch (error) {\n        console.error('Error during login:', error);\n        if (error.response) {\n          console.error('Backend Error:', error.response.data);\n        } else if (error.request) {\n          console.error('No Response from Backend:', error.request);\n        } else {\n          console.error('Setup Error:', error.message);\n        }\n      }\n    },\n    onError: error => {\n      console.error('Login Failed:', error);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCustomButton, {\n      onClick: () => login(),\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"zY/v83cBMrwD3I51qGaOiRFUBvU=\", false, function () {\n  return [useGoogleLogin];\n});\n_c2 = LoginPage;\nexport default LoginPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyCustomButton\");\n$RefreshReg$(_c2, \"LoginPage\");","map":{"version":3,"names":["React","axios","useGoogleLogin","jsxDEV","_jsxDEV","MyCustomButton","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","LoginPage","_s","login","onSuccess","tokenResponse","console","log","userInfoResponse","fetch","headers","Authorization","access_token","ok","error","statusText","userInfo","json","payload","googleId","sub","email","name","profilePicture","picture","accessToken","refresh_token","refreshToken","response","post","withCredentials","validateStatus","status","warn","data","window","location","href","request","message","onError","_c2","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { useGoogleLogin } from '@react-oauth/google';\n\nconst MyCustomButton = ({ onClick, children }) => (\n  <button onClick={onClick}>{children}</button>\n);\n\nconst LoginPage = () => {\n  const login = useGoogleLogin({ \n    onSuccess: async (tokenResponse) => {\n      console.log('Login Success:', tokenResponse);\n\n      try { \n        // Fetch user info from Google API using the provided token\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: { Authorization: `Bearer ${tokenResponse.access_token}` },\n        });\n\n        if (!userInfoResponse.ok) {\n          console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n          return;\n        }\n\n        const userInfo = await userInfoResponse.json();\n        console.log('Fetched User Info:', userInfo);\n\n        // Prepare the payload to send to the backend\n        const payload = {\n          googleId: userInfo.sub,\n          email: userInfo.email,\n          name: userInfo.name,\n          profilePicture: userInfo.picture,\n          accessToken: tokenResponse.access_token,\n        };\n\n        // Optionally include refresh token if available\n        if (tokenResponse.refresh_token) {\n          payload.refreshToken = tokenResponse.refresh_token;\n        }\n\n        // Send user data to backend for authentication/registration\n        const response = await axios.post('http://localhost:5001/auth/google', payload, {\n          withCredentials: true,\n          validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n        });\n\n        if (response.status === 500) {\n          console.warn('Server returned a 500 status code');\n          return; // Exit if there's a server error\n        }\n\n        console.log('Backend Response:', response.data);\n        \n        // // Optional: Get authenticated user data from the backend\n        // const userResponse = await axios.get('http://localhost:5001/auth/user', {\n        //   withCredentials: true,\n        // });\n\n        // console.log('Authenticated User:', userResponse.data);\n        \n        // Redirect to events page only after successful authentication\n        window.location.href = '/events';\n\n      } catch (error) {\n        console.error('Error during login:', error);\n\n        if (error.response) {\n          console.error('Backend Error:', error.response.data);\n        } else if (error.request) {\n          console.error('No Response from Backend:', error.request);\n        } else {\n          console.error('Setup Error:', error.message);\n        }\n      }\n    },\n    onError: (error) => {\n      console.error('Login Failed:', error);\n    },\n  });\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}