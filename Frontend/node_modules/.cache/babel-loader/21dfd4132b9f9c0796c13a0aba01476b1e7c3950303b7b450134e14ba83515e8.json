{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       // Send data to the backend\n//       try {\n//         // Fetch user info from Google using the access token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: {\n//             Authorization: `Bearer ${tokenResponse.access_token}`, // Corrected syntax for template literals\n//           },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           // If fetching user info fails, log it but don't throw an error\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return; // Exit early but don't stop execution\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n\n//         // Send the user info to the backend\n//         const response = await axios.post(\n//           'http://localhost:5001/auth/google',\n//           {\n//             googleId: userInfo.sub,\n//             email: userInfo.email,\n//             name: userInfo.name,\n//             profilePicture: userInfo.picture,\n//             accessToken: tokenResponse.access_token, // For future calls\n//             refreshToken: tokenResponse.refresh_token,\n//           },\n//           {\n//             // Custom validateStatus to treat status codes >= 200 and 500 as valid\n//             validateStatus: (status) => {\n//               return (status >= 200 && status < 300) || status === 500; // Accept 500 as valid\n//             },\n//           }\n//         );\n//         //this\n//         axios.get('http://localhost:5001/auth/user', { withCredentials: true });\n//         axios.interceptors.request.use(request => {\n//           console.log('Starting Request', request);\n//           return request;\n//         });\n\n//         axios.interceptors.response.use(response => {\n//           console.log('Response:', response);\n//           return response;\n//         });\n\n//         // Check if the response status is 500 and log a warning\n//         if (response.status === 500) {\n//           console.warn('Received status code 500 from the server');\n//         }\n\n//         // Continue execution even after receiving a 500 or successful response\n//         console.log('Backend response:', response.data);\n//       } catch (error) {\n//         // Log any other errors (network issues, etc.), but don't stop execution\n//         console.error('Error fetching user info or sending to backend:', error);\n//       }\n//     },\n//     onError: () => {\n//       console.log('Login Failed');\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\nimport React from 'react';\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport { useGoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyCustomButton = ({\n  onClick,\n  children\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: onClick,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 93,\n  columnNumber: 3\n}, this);\n_c = MyCustomButton;\nconst LoginPage = () => {\n  _s();\n  const login = useGoogleLogin({\n    onSuccess: async tokenResponse => {\n      console.log('Login Success:', tokenResponse);\n      try {\n        // Fetch user info from Google using the access token\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: {\n            Authorization: `Bearer ${tokenResponse.access_token}`\n          }\n        });\n        if (!userInfoResponse.ok) {\n          console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n          return;\n        }\n        const userInfo = await userInfoResponse.json();\n        console.log('Fetched User Info:', userInfo);\n\n        // Send the user info to the backend\n        const response = await axios.post('http://localhost:5001/auth/google',\n        // Backend endpoint for Google login\n        {\n          googleId: userInfo.sub,\n          // Unique Google user ID\n          email: userInfo.email,\n          // User's email\n          name: userInfo.name,\n          // User's name\n          profilePicture: userInfo.picture,\n          // User's profile picture URL\n          accessToken: tokenResponse.access_token // Google access token\n        }, {\n          withCredentials: true // Send cookies for authentication\n        });\n        console.log('Backend Response:', response.data);\n\n        // Redirect to the events page after successful login\n        window.location.href = '/events';\n      } catch (error) {\n        console.error('Error during login or backend communication:', error);\n\n        // Handle common Axios or network issues\n        if (error.response) {\n          console.error('Backend returned an error:', error.response.data);\n        } else if (error.request) {\n          console.error('No response received from backend:', error.request);\n        } else {\n          console.error('Error setting up request:', error.message);\n        }\n      }\n    },\n    onError: error => {\n      console.error('Login Failed:', error);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCustomButton, {\n      onClick: () => login(),\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"zY/v83cBMrwD3I51qGaOiRFUBvU=\", false, function () {\n  return [useGoogleLogin];\n});\n_c2 = LoginPage;\nexport default LoginPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyCustomButton\");\n$RefreshReg$(_c2, \"LoginPage\");","map":{"version":3,"names":["React","axios","useGoogleLogin","jsxDEV","_jsxDEV","MyCustomButton","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","LoginPage","_s","login","onSuccess","tokenResponse","console","log","userInfoResponse","fetch","headers","Authorization","access_token","ok","error","statusText","userInfo","json","response","post","googleId","sub","email","name","profilePicture","picture","accessToken","withCredentials","data","window","location","href","request","message","onError","_c2","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/LoginPage.js"],"sourcesContent":["// import React from 'react';\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import { useGoogleLogin } from '@react-oauth/google';\n\n// const MyCustomButton = ({ onClick, children }) => (\n//   <button onClick={onClick}>{children}</button>\n// );\n\n// const LoginPage = () => {\n//   const login = useGoogleLogin({\n//     onSuccess: async (tokenResponse) => {\n//       console.log('Login Success:', tokenResponse);\n\n//       // Send data to the backend\n//       try {\n//         // Fetch user info from Google using the access token\n//         const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n//           headers: {\n//             Authorization: `Bearer ${tokenResponse.access_token}`, // Corrected syntax for template literals\n//           },\n//         });\n\n//         if (!userInfoResponse.ok) {\n//           // If fetching user info fails, log it but don't throw an error\n//           console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n//           return; // Exit early but don't stop execution\n//         }\n\n//         const userInfo = await userInfoResponse.json();\n\n//         // Send the user info to the backend\n//         const response = await axios.post(\n//           'http://localhost:5001/auth/google',\n//           {\n//             googleId: userInfo.sub,\n//             email: userInfo.email,\n//             name: userInfo.name,\n//             profilePicture: userInfo.picture,\n//             accessToken: tokenResponse.access_token, // For future calls\n//             refreshToken: tokenResponse.refresh_token,\n//           },\n//           {\n//             // Custom validateStatus to treat status codes >= 200 and 500 as valid\n//             validateStatus: (status) => {\n//               return (status >= 200 && status < 300) || status === 500; // Accept 500 as valid\n//             },\n//           }\n//         );\n//         //this\n//         axios.get('http://localhost:5001/auth/user', { withCredentials: true });\n//         axios.interceptors.request.use(request => {\n//           console.log('Starting Request', request);\n//           return request;\n//         });\n        \n//         axios.interceptors.response.use(response => {\n//           console.log('Response:', response);\n//           return response;\n//         });\n\n\n//         // Check if the response status is 500 and log a warning\n//         if (response.status === 500) {\n//           console.warn('Received status code 500 from the server');\n//         }\n\n//         // Continue execution even after receiving a 500 or successful response\n//         console.log('Backend response:', response.data);\n//       } catch (error) {\n//         // Log any other errors (network issues, etc.), but don't stop execution\n//         console.error('Error fetching user info or sending to backend:', error);\n//       }\n//     },\n//     onError: () => {\n//       console.log('Login Failed');\n//     },\n//   });\n\n//   return (\n//     <div>\n//       <h1>Login</h1>\n//       <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\nimport React from 'react';\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport { useGoogleLogin } from '@react-oauth/google';\n\nconst MyCustomButton = ({ onClick, children }) => (\n  <button onClick={onClick}>{children}</button>\n);\n\nconst LoginPage = () => {\n  const login = useGoogleLogin({\n    onSuccess: async (tokenResponse) => {\n      console.log('Login Success:', tokenResponse);\n\n      try {\n        // Fetch user info from Google using the access token\n        const userInfoResponse = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: {\n            Authorization: `Bearer ${tokenResponse.access_token}`,\n          },\n        });\n\n        if (!userInfoResponse.ok) {\n          console.error(`Failed to fetch user info: ${userInfoResponse.statusText}`);\n          return;\n        }\n\n        const userInfo = await userInfoResponse.json();\n        console.log('Fetched User Info:', userInfo);\n\n        // Send the user info to the backend\n        const response = await axios.post(\n          'http://localhost:5001/auth/google', // Backend endpoint for Google login\n          {\n            googleId: userInfo.sub, // Unique Google user ID\n            email: userInfo.email, // User's email\n            name: userInfo.name, // User's name\n            profilePicture: userInfo.picture, // User's profile picture URL\n            accessToken: tokenResponse.access_token, // Google access token\n          },\n          {\n            withCredentials: true, // Send cookies for authentication\n          }\n        );\n\n        console.log('Backend Response:', response.data);\n\n        // Redirect to the events page after successful login\n        window.location.href = '/events';\n      } catch (error) {\n        console.error('Error during login or backend communication:', error);\n\n        // Handle common Axios or network issues\n        if (error.response) {\n          console.error('Backend returned an error:', error.response.data);\n        } else if (error.request) {\n          console.error('No response received from backend:', error.request);\n        } else {\n          console.error('Error setting up request:', error.message);\n        }\n      }\n    },\n    onError: (error) => {\n      console.error('Login Failed:', error);\n    },\n  });\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <MyCustomButton onClick={() => login()}>Sign in with Google</MyCustomButton>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}