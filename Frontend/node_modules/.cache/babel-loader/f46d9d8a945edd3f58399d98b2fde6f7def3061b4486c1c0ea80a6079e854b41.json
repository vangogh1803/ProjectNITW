{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/Events.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n// import './css/Events.css';\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n\n//   const handleAddEvent = async () => {\n//     try {\n//       // Validate inputs\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n\n//       // Ensure start and end are valid dates\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n\n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n\n//       // Convert to ISO strings (dateTime)\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n\n//       // Construct the event object with dateTime\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n\n//       // Make POST request to add the event\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n\n//       // Handle response\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n\n//       // Optionally fetch updated events\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//       {/* Sidebar */}\n//       <div className=\"sidebar\">\n//         <h2>Navigation</h2>\n//         <a href=\"/UserPage\">User Page</a>\n//         <a href=\"/events\">Events</a>\n//       </div>\n//       <div className=\"main-content\">\n//         <h1>Add New Event</h1>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Summary\"\n//           value={summary}\n//           onChange={(e) => setSummary(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={start}\n//           onChange={(e) => setStart(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={end}\n//           onChange={(e) => setEnd(e.target.value)}\n//         />\n//         <button type=\"button\" onClick={handleAddEvent}>\n//           Add Event\n//         </button>\n\n//         <div className=\"calendar-container\">\n//           <MyCalendar className=\"calendar-section\" events={events} />\n//         </div>\n\n//         {/* Link to Google Calendar */}\n//         <div className=\"google-calendar-link\">\n//           <a\n//             href=\"https://www.google.com/calendar\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//             className=\"google-calendar-button\"\n//           >\n//             Go to Google Calendar\n//           </a>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Events;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; // Import the Calendar component\nimport UpcomingEvents from './UpcomingEvents'; // Import UpcomingEvents component\nimport './css/Events.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Events = () => {\n  _s();\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  // Fetch events on component mount\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/', {\n          withCredentials: true\n        });\n        setEvents(response.data);\n      } catch (error) {\n        var _error$response;\n        console.error('Error fetching events:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n    };\n    fetchEvents(); // Fetch events when the component loads\n    document.body.className = 'events-page';\n    return () => {\n      document.body.className = '';\n    };\n  }, []); // Empty dependency array ensures this runs only on mount\n\n  const handleAddEvent = async () => {\n    try {\n      if (!start || !end) {\n        alert('Start and end times are required.');\n        return;\n      }\n      const startDate = new Date(start);\n      const endDate = new Date(end);\n      if (isNaN(startDate) || isNaN(endDate)) {\n        alert('Invalid date or time format.');\n        return;\n      }\n      const startISO = startDate.toISOString();\n      const endISO = endDate.toISOString();\n      const newEvent = {\n        summary,\n        start: {\n          dateTime: startISO,\n          timeZone: 'Asia/Kolkata'\n        },\n        end: {\n          dateTime: endISO,\n          timeZone: 'Asia/Kolkata'\n        }\n      };\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n        withCredentials: true,\n        validateStatus: status => status >= 200 && status < 300 || status === 500\n      });\n      if (response.status === 500) {\n        console.warn('Server returned a 500 status code');\n        return;\n      }\n\n      // Fetch updated events after adding a new one\n      const updatedEvents = await axios.get('http://localhost:5001/', {\n        withCredentials: true\n      });\n      setEvents(updatedEvents.data);\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      var _error$response2;\n      console.error('Error adding event:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"events-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Navigation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/UserPage\",\n        children: \"User Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/events\",\n        children: \"Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add New Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Summary\",\n        value: summary,\n        onChange: e => setSummary(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        value: start,\n        onChange: e => setStart(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        value: end,\n        onChange: e => setEnd(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddEvent,\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: /*#__PURE__*/_jsxDEV(MyCalendar, {\n          className: \"calendar-section\",\n          events: events\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"google-calendar-link\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.google.com/calendar\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"google-calendar-button\",\n          children: \"Go to Google Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upcoming-events-container\",\n      children: /*#__PURE__*/_jsxDEV(UpcomingEvents, {\n        events: events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(Events, \"ET3GfNF4G2YOEhjQ+kOnc2n+TYY=\");\n_c = Events;\nexport default Events;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n// import UpcomingEvents from './UpcomingEvents'; // Import UpcomingEvents component\n// import './css/Events.css';\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n//   const [sidebarOpen, setSidebarOpen] = useState(false); // State to toggle sidebar\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n\n//   const handleAddEvent = async () => {\n//     try {\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n\n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//       <div className = 'sidebar'>\n//         <h2>Navigation</h2>\n//         <a href=\"/UserPage\">User Page</a>\n//         <a href=\"/events\">Events</a>\n//       </div>\n\n//       <div className=\"main-content\">\n//         <h1>Add New Event</h1>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Summary\"\n//           value={summary}\n//           onChange={(e) => setSummary(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={start}\n//           onChange={(e) => setStart(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={end}\n//           onChange={(e) => setEnd(e.target.value)}\n//         />\n//         <button type=\"button\" onClick={handleAddEvent}>\n//           Add Event\n//         </button>\n\n//         <div className=\"calendar-container\">\n//           <MyCalendar className=\"calendar-section\" events={events} />\n//         </div>\n\n//         <div className=\"google-calendar-link\">\n//           <a\n//             href=\"https://www.google.com/calendar\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//             className=\"google-calendar-button\"\n//           >\n//             Go to Google Calendar\n//           </a>\n//         </div>\n//       </div>\n\n//       {/* Upcoming Events Box */}\n//       <div className=\"upcoming-events-container\">\n//         <UpcomingEvents events={events} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; //Import the Calendar component\n// import './css/Events.css';\n// import {useEffect} from 'react';\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n//   const handleAddEvent = async () => {\n//     try {\n//       // Validate inputs\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n\n//       // Ensure start and end are valid dates\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n\n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n\n//       // Convert to ISO strings (dateTime)\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n\n//       // Construct the event object with dateTime\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n\n//       // Make POST request to add the event\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n\n//       // Handle response\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n\n//       //console.log('Backend Response:', response.data);\n\n//       // Optionally fetch updated events\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n//       console.log(updatedEvents);\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//     {/* Sidebar */}\n//     <div className=\"sidebar\">\n//       <h2>Navigation</h2>\n//       <a href=\"/UserPage\">User Page</a>\n//       <a href=\"/events\">Events</a>\n//     </div>\n//     <div className='main-content'>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button type=\"button\" onClick={handleAddEvent}>Add Event</button>\n//     <div className='calendar-container'>\n//       <MyCalendar className='calendar-section'events={events} /> \n\n//     </div>\n//     </div>\n//     </div>\n//    );\n// };\n\n// export default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n\n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["React","useState","useEffect","axios","MyCalendar","UpcomingEvents","jsxDEV","_jsxDEV","Events","_s","summary","setSummary","start","setStart","end","setEnd","events","setEvents","fetchEvents","response","get","withCredentials","data","error","_error$response","console","message","document","body","className","handleAddEvent","alert","startDate","Date","endDate","isNaN","startISO","toISOString","endISO","newEvent","dateTime","timeZone","post","validateStatus","status","warn","updatedEvents","_error$response2","children","fileName","_jsxFileName","lineNumber","columnNumber","href","type","placeholder","value","onChange","e","target","onClick","rel","_c","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/Events.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n// import './css/Events.css';\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n\n//   const handleAddEvent = async () => {\n//     try {\n//       // Validate inputs\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n\n//       // Ensure start and end are valid dates\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n\n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n\n//       // Convert to ISO strings (dateTime)\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n\n//       // Construct the event object with dateTime\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n\n//       // Make POST request to add the event\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n\n//       // Handle response\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n\n//       // Optionally fetch updated events\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//       {/* Sidebar */}\n//       <div className=\"sidebar\">\n//         <h2>Navigation</h2>\n//         <a href=\"/UserPage\">User Page</a>\n//         <a href=\"/events\">Events</a>\n//       </div>\n//       <div className=\"main-content\">\n//         <h1>Add New Event</h1>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Summary\"\n//           value={summary}\n//           onChange={(e) => setSummary(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={start}\n//           onChange={(e) => setStart(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={end}\n//           onChange={(e) => setEnd(e.target.value)}\n//         />\n//         <button type=\"button\" onClick={handleAddEvent}>\n//           Add Event\n//         </button>\n\n//         <div className=\"calendar-container\">\n//           <MyCalendar className=\"calendar-section\" events={events} />\n//         </div>\n\n//         {/* Link to Google Calendar */}\n//         <div className=\"google-calendar-link\">\n//           <a\n//             href=\"https://www.google.com/calendar\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//             className=\"google-calendar-button\"\n//           >\n//             Go to Google Calendar\n//           </a>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Events;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; // Import the Calendar component\nimport UpcomingEvents from './UpcomingEvents'; // Import UpcomingEvents component\nimport './css/Events.css';\n\nconst Events = () => {\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  // Fetch events on component mount\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/', { withCredentials: true });\n        setEvents(response.data);\n      } catch (error) {\n        console.error('Error fetching events:', error.response?.data || error.message);\n      }\n    };\n\n    fetchEvents(); // Fetch events when the component loads\n    document.body.className = 'events-page';\n\n    return () => {\n      document.body.className = '';\n    };\n  }, []); // Empty dependency array ensures this runs only on mount\n\n  const handleAddEvent = async () => {\n    try {\n      if (!start || !end) {\n        alert('Start and end times are required.');\n        return;\n      }\n\n      const startDate = new Date(start);\n      const endDate = new Date(end);\n\n      if (isNaN(startDate) || isNaN(endDate)) {\n        alert('Invalid date or time format.');\n        return;\n      }\n\n      const startISO = startDate.toISOString();\n      const endISO = endDate.toISOString();\n\n      const newEvent = {\n        summary,\n        start: {\n          dateTime: startISO,\n          timeZone: 'Asia/Kolkata',\n        },\n        end: {\n          dateTime: endISO,\n          timeZone: 'Asia/Kolkata',\n        },\n      };\n\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n        withCredentials: true,\n        validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n      });\n\n      if (response.status === 500) {\n        console.warn('Server returned a 500 status code');\n        return;\n      }\n\n      // Fetch updated events after adding a new one\n      const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n      setEvents(updatedEvents.data);\n\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      console.error('Error adding event:', error.response?.data || error.message);\n    }\n  };\n\n  \n\n  return (\n    <div className=\"events-page\">\n\n      <div className='sidebar'>\n        <h2>Navigation</h2>\n        <a href=\"/UserPage\">User Page</a>\n        <a href=\"/events\">Events</a>\n      </div>\n\n      <div className=\"main-content\">\n        <h1>Add New Event</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Event Summary\"\n          value={summary}\n          onChange={(e) => setSummary(e.target.value)}\n        />\n        <input\n          type=\"datetime-local\"\n          value={start}\n          onChange={(e) => setStart(e.target.value)}\n        />\n        <input\n          type=\"datetime-local\"\n          value={end}\n          onChange={(e) => setEnd(e.target.value)}\n        />\n        <button type=\"button\" onClick={handleAddEvent}>\n          Add Event\n        </button>\n\n        <div className=\"calendar-container\">\n          <MyCalendar className=\"calendar-section\" events={events} />\n        </div>\n\n        <div className=\"google-calendar-link\">\n          <a\n            href=\"https://www.google.com/calendar\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"google-calendar-button\"\n          >\n            Go to Google Calendar\n          </a>\n        </div>\n      </div>\n\n      {/* Upcoming Events Box */}\n      <div className=\"upcoming-events-container\">\n        <UpcomingEvents events={events} />\n      </div>\n    </div>\n  );\n};\n\nexport default Events;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n// import UpcomingEvents from './UpcomingEvents'; // Import UpcomingEvents component\n// import './css/Events.css';\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n//   const [sidebarOpen, setSidebarOpen] = useState(false); // State to toggle sidebar\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n\n//   const handleAddEvent = async () => {\n//     try {\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n\n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n//   };\n\n\n//   return (\n//     <div className=\"events-page\">\n//       <div className = 'sidebar'>\n//         <h2>Navigation</h2>\n//         <a href=\"/UserPage\">User Page</a>\n//         <a href=\"/events\">Events</a>\n//       </div>\n\n//       <div className=\"main-content\">\n//         <h1>Add New Event</h1>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Event Summary\"\n//           value={summary}\n//           onChange={(e) => setSummary(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={start}\n//           onChange={(e) => setStart(e.target.value)}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           value={end}\n//           onChange={(e) => setEnd(e.target.value)}\n//         />\n//         <button type=\"button\" onClick={handleAddEvent}>\n//           Add Event\n//         </button>\n\n//         <div className=\"calendar-container\">\n//           <MyCalendar className=\"calendar-section\" events={events} />\n//         </div>\n\n//         <div className=\"google-calendar-link\">\n//           <a\n//             href=\"https://www.google.com/calendar\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//             className=\"google-calendar-button\"\n//           >\n//             Go to Google Calendar\n//           </a>\n//         </div>\n//       </div>\n\n//       {/* Upcoming Events Box */}\n//       <div className=\"upcoming-events-container\">\n//         <UpcomingEvents events={events} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Events;\n\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; //Import the Calendar component\n// import './css/Events.css';\n// import {useEffect} from 'react';\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   useEffect(() => {\n//     document.body.className = 'events-page';\n//     return () => {\n//       document.body.className = '';\n//     };\n//   }, []);\n//   const handleAddEvent = async () => {\n//     try {\n//       // Validate inputs\n//       if (!start || !end) {\n//         alert('Start and end times are required.');\n//         return;\n//       }\n  \n//       // Ensure start and end are valid dates\n//       const startDate = new Date(start);\n//       const endDate = new Date(end);\n  \n//       if (isNaN(startDate) || isNaN(endDate)) {\n//         alert('Invalid date or time format.');\n//         return;\n//       }\n  \n//       // Convert to ISO strings (dateTime)\n//       const startISO = startDate.toISOString();\n//       const endISO = endDate.toISOString();\n  \n//       // Construct the event object with dateTime\n//       const newEvent = {\n//         summary,\n//         start: {\n//           dateTime: startISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//         end: {\n//           dateTime: endISO,\n//           timeZone: 'Asia/Kolkata',\n//         },\n//       };\n  \n//       // Make POST request to add the event\n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//         withCredentials: true,\n//         validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//       });\n  \n//       // Handle response\n//       if (response.status === 500) {\n//         console.warn('Server returned a 500 status code');\n//         return;\n//       }\n  \n//       //console.log('Backend Response:', response.data);\n  \n//       // Optionally fetch updated events\n//       const updatedEvents = await axios.get('http://localhost:5001/', { withCredentials: true });\n//       setEvents(updatedEvents.data);\n//       console.log(updatedEvents);\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error.response?.data || error.message);\n//     }\n\n//   };\n\n//   return (\n//     <div className=\"events-page\">\n//     {/* Sidebar */}\n//     <div className=\"sidebar\">\n//       <h2>Navigation</h2>\n//       <a href=\"/UserPage\">User Page</a>\n//       <a href=\"/events\">Events</a>\n//     </div>\n//     <div className='main-content'>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button type=\"button\" onClick={handleAddEvent}>Add Event</button>\n//     <div className='calendar-container'>\n//       <MyCalendar className='calendar-section'events={events} /> \n      \n//     </div>\n//     </div>\n//     </div>\n//    );\n// };\n\n// export default Events;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n\n// const Events = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n//   const [events, setEvents] = useState([]); // To store fetched events\n\n//   const handleAddEvent = async () => {\n//     try {\n     \n//       const startDate = new Date(start).toISOString(); // Generates a date-time string\n// const endDate = new Date(end).toISOString();\n\n// const newEvent = {\n//   summary,\n//   start: {\n//     dateTime: startDate, // Use ISO string for start date\n//     timeZone: 'Asia/Kolkata', // Add consistent timeZone\n//   },\n//   end: {\n//     dateTime: endDate, // Use ISO string for end date\n//     timeZone: 'Asia/Kolkata',\n//   },\n// };\n// try {\n//   const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n//     withCredentials: true,\n//     validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//   });\n\n//   console.log('Backend Response:', response.data);\n\n//   if (response.status === 500) {\n//     console.warn('Server returned a 500 status code');\n//     return;\n//   }\n// } catch (error) {\n//   console.error('Error adding event:', error.response?.data || error.message);\n// }\n      \n//       const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n//       validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n//     });\n//     console.log(response);\n//     if (response.status === 500) {\n//       console.warn('Server returned a 500 status code');\n//       return; // Exit if there's a server error\n//     }\n\n//     console.log('Backend Response:', response.data);\n//       //////changed here////\n//       // // Optionally, fetch the updated list of events after adding the new one\n//       // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n//       // setEvents(response.data); // Update state with new event list\n\n//       // Clear form fields\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar events={events} /> {/* Display the calendar with events */}\n//     </div>\n//   );\n// };\n\n// export default Events;\n\n"],"mappings":"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EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGN7C,OAAA;MAAKsB,SAAS,EAAC,2BAA2B;MAAAmB,QAAA,eACxCzC,OAAA,CAACF,cAAc;QAACW,MAAM,EAAEA;MAAO;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3C,EAAA,CApIID,MAAM;AAAAsD,EAAA,GAANtD,MAAM;AAsIZ,eAAeA,MAAM;;AAGrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}