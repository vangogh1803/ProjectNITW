{"ast":null,"code":"var _jsxFileName = \"/Users/Niyati/ProjectNITW2/Frontend/src/Events.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; // Import the Calendar component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Events = () => {\n  _s();\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  const handleAddEvent = async () => {\n    try {\n      const startDate = new Date(start).toISOString(); // Converts to ISO 8601 format\n      const endDate = new Date(end).toISOString();\n      const newEvent = {\n        summary,\n        startDate,\n        endDate\n      };\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, {\n        withCredentials: true,\n        validateStatus: status => status >= 200 && status < 300 || status === 500\n      });\n      console.log(response);\n      if (response.status === 500) {\n        console.warn('Server returned a 500 status code');\n        return; // Exit if there's a server error\n      }\n      console.log('Backend Response:', response.data);\n      //////changed here////\n      // // Optionally, fetch the updated list of events after adding the new one\n      // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n      // setEvents(response.data); // Update state with new event list\n\n      // Clear form fields\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add New Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Event Summary\",\n      value: summary,\n      onChange: e => setSummary(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: start,\n      onChange: e => setStart(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: end,\n      onChange: e => setEnd(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddEvent,\n      children: \"Add Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCalendar, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Events, \"KFJsRte9VBCf3dvhHhMUXEVEYY8=\");\n_c = Events;\nexport default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n// const EventsPage = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n\n//   const handleAddEvent = async () => {\n//     try {\n//       const newEvent = {\n//         start,\n//         end,\n//       };\n//       await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true });\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar /> {/* Display the calendar */}\n//     </div>\n//   );\n// };\n\n// export default EventsPage;\n// import React, { useEffect, useState } from 'react';\n// import { Calendar, momentLocalizer } from 'react-big-calendar';\n// import moment from 'moment';\n// import 'react-big-calendar/lib/css/react-big-calendar.css'; // Import the calendar CSS\n\n// const localizer = momentLocalizer(moment); // Configure moment.js for localization\n\n// const CalendarPage = () => {\n//   const [events, setEvents] = useState([]); // State to store events\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await fetch('/calendar'); // Backend API endpoint\n//         const data = await response.json();\n\n//         // Convert Google Calendar events to the format expected by React Big Calendar\n//         const formattedEvents = data.map(event => ({\n//           title: event.summary,\n//           start: new Date(event.start.dateTime || event.start.date), // Supports all-day events\n//           end: new Date(event.end.dateTime || event.end.date),\n//         }));\n//         setEvents(formattedEvents);\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>My Calendar</h1>\n//       <Calendar\n//         localizer={localizer}\n//         events={events} // Provide fetched events to the calendar\n//         startAccessor=\"start\"\n//         endAccessor=\"end\"\n//         style={{ height: 500, margin: '50px' }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default CalendarPage;\n\n// import React from 'react';\n\n// const EventsPage = () => {\n//   const calendarSrc = `https://calendar.google.com/calendar/embed?src=primary&ctz=Asia/Kolkata`; // Use appropriate timezone\n\n//   return (\n//     <div>\n//       <h1>Your Google Calendar</h1>\n//       <iframe\n//         src={calendarSrc}\n//         style={{ border: '0' }}\n//         width=\"800\"\n//         height=\"600\"\n//         frameBorder=\"0\"\n//         scrolling=\"no\"\n//         title=\"Google Calendar\"\n//       ></iframe>\n//     </div>\n//   );\n// };\n\n// export default EventsPage;\n\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n\n// // const EventsPage = () => {\n// //   const [events, setEvents] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/calendar', {\n// //           withCredentials: true,\n// //         });\n// //         setEvents(response.data);\n// //       } catch (error) {\n// //         console.error('Error fetching calendar events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       <h1>Your Upcoming Events</h1>\n// //       {events.length > 0 ? (\n// //         <ul>\n// //           {events.map((event) => (\n// //             <li key={event.id}>\n// //               <h2>{event.summary}</h2>\n// //               <p>{new Date(event.start.dateTime || event.start.date).toLocaleString()}</p>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       ) : (\n// //         <p>No events found.</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["React","useState","axios","MyCalendar","jsxDEV","_jsxDEV","Events","_s","summary","setSummary","start","setStart","end","setEnd","events","setEvents","handleAddEvent","startDate","Date","toISOString","endDate","newEvent","response","post","withCredentials","validateStatus","status","console","log","warn","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/Niyati/ProjectNITW2/Frontend/src/Events.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport MyCalendar from './Calender.js'; // Import the Calendar component\n\n\nconst Events = () => {\n  const [summary, setSummary] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [events, setEvents] = useState([]); // To store fetched events\n\n  const handleAddEvent = async () => {\n    try {\n     \n      const startDate = new Date(start).toISOString(); // Converts to ISO 8601 format\n      const endDate = new Date(end).toISOString();\n\n      const newEvent = { summary, startDate, endDate };\n      const response = await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true,\n      validateStatus: (status) => (status >= 200 && status < 300) || status === 500,\n    });\n    console.log(response);\n    if (response.status === 500) {\n      console.warn('Server returned a 500 status code');\n      return; // Exit if there's a server error\n    }\n\n    console.log('Backend Response:', response.data);\n      //////changed here////\n      // // Optionally, fetch the updated list of events after adding the new one\n      // const response = await axios.get('http://localhost:5001/api/events', { withCredentials: true });\n      // setEvents(response.data); // Update state with new event list\n\n      // Clear form fields\n      setSummary('');\n      setStart('');\n      setEnd('');\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Add New Event</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Event Summary\"\n        value={summary}\n        onChange={(e) => setSummary(e.target.value)}\n      />\n      <input\n        type=\"datetime-local\"\n        value={start}\n        onChange={(e) => setStart(e.target.value)}\n      />\n      <input\n        type=\"datetime-local\"\n        value={end}\n        onChange={(e) => setEnd(e.target.value)}\n      />\n      <button onClick={handleAddEvent}>Add Event</button>\n\n      <MyCalendar events={events} /> {/* Display the calendar with events */}\n    </div>\n  );\n};\n\nexport default Events;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import MyCalendar from './Calender.js'; // Import the Calendar component\n\n// const EventsPage = () => {\n//   const [summary, setSummary] = useState('');\n//   const [start, setStart] = useState('');\n//   const [end, setEnd] = useState('');\n\n//   const handleAddEvent = async () => {\n//     try {\n//       const newEvent = {\n//         start,\n//         end,\n//       };\n//       await axios.post('http://localhost:5001/api/events', newEvent, { withCredentials: true });\n//       setSummary('');\n//       setStart('');\n//       setEnd('');\n//     } catch (error) {\n//       console.error('Error adding event:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Add New Event</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Event Summary\"\n//         value={summary}\n//         onChange={(e) => setSummary(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={start}\n//         onChange={(e) => setStart(e.target.value)}\n//       />\n//       <input\n//         type=\"datetime-local\"\n//         value={end}\n//         onChange={(e) => setEnd(e.target.value)}\n//       />\n//       <button onClick={handleAddEvent}>Add Event</button>\n\n//       <MyCalendar /> {/* Display the calendar */}\n//     </div>\n//   );\n// };\n\n// export default EventsPage;\n// import React, { useEffect, useState } from 'react';\n// import { Calendar, momentLocalizer } from 'react-big-calendar';\n// import moment from 'moment';\n// import 'react-big-calendar/lib/css/react-big-calendar.css'; // Import the calendar CSS\n\n// const localizer = momentLocalizer(moment); // Configure moment.js for localization\n\n// const CalendarPage = () => {\n//   const [events, setEvents] = useState([]); // State to store events\n\n//   // Fetch events from the backend\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       try {\n//         const response = await fetch('/calendar'); // Backend API endpoint\n//         const data = await response.json();\n        \n//         // Convert Google Calendar events to the format expected by React Big Calendar\n//         const formattedEvents = data.map(event => ({\n//           title: event.summary,\n//           start: new Date(event.start.dateTime || event.start.date), // Supports all-day events\n//           end: new Date(event.end.dateTime || event.end.date),\n//         }));\n//         setEvents(formattedEvents);\n//       } catch (error) {\n//         console.error('Error fetching events:', error);\n//       }\n//     };\n\n//     fetchEvents();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>My Calendar</h1>\n//       <Calendar\n//         localizer={localizer}\n//         events={events} // Provide fetched events to the calendar\n//         startAccessor=\"start\"\n//         endAccessor=\"end\"\n//         style={{ height: 500, margin: '50px' }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default CalendarPage;\n\n// import React from 'react';\n\n// const EventsPage = () => {\n//   const calendarSrc = `https://calendar.google.com/calendar/embed?src=primary&ctz=Asia/Kolkata`; // Use appropriate timezone\n\n//   return (\n//     <div>\n//       <h1>Your Google Calendar</h1>\n//       <iframe\n//         src={calendarSrc}\n//         style={{ border: '0' }}\n//         width=\"800\"\n//         height=\"600\"\n//         frameBorder=\"0\"\n//         scrolling=\"no\"\n//         title=\"Google Calendar\"\n//       ></iframe>\n//     </div>\n//   );\n// };\n\n// export default EventsPage;\n\n// // import React, { useEffect, useState } from 'react';\n// // import axios from 'axios';\n\n// // const EventsPage = () => {\n// //   const [events, setEvents] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchEvents = async () => {\n// //       try {\n// //         const response = await axios.get('http://localhost:5001/calendar', {\n// //           withCredentials: true,\n// //         });\n// //         setEvents(response.data);\n// //       } catch (error) {\n// //         console.error('Error fetching calendar events:', error);\n// //       }\n// //     };\n\n// //     fetchEvents();\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       <h1>Your Upcoming Events</h1>\n// //       {events.length > 0 ? (\n// //         <ul>\n// //           {events.map((event) => (\n// //             <li key={event.id}>\n// //               <h2>{event.summary}</h2>\n// //               <p>{new Date(event.start.dateTime || event.start.date).toLocaleString()}</p>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       ) : (\n// //         <p>No events found.</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EventsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}